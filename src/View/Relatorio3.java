/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.CtrlImovel;
import Controller.VisitaController;
import Model.Imovel;
import Model.Visita;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author john
 */
public class Relatorio3 extends javax.swing.JFrame {
    
    private VisitaController visController;
    private ArrayList<Visita> visArr;
    private CtrlImovel imovelController;

    /**
     * Creates new form Relatorio3
     */
    public Relatorio3() {
        initComponents();
        
        this.visController = new VisitaController();
        try {
            imovelController = new CtrlImovel();
        } catch (Exception e){
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        datePicker2 = new com.github.lgooddatepicker.components.DatePicker();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Visitas por corretor por período");

        jButton1.setText("Pesquisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jLabel2.setText("Data inicial");

        jLabel3.setText("Data final");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(123, 123, 123)
                                .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(100, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(172, 172, 172))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(173, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // check if dates are filled
        if (this.datePicker1.getDateStringOrEmptyString().matches("")){
            JOptionPane.showMessageDialog(this, "Precisa ser selecionada a data inicial","Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (this.datePicker2.getDateStringOrEmptyString().matches("")){
            JOptionPane.showMessageDialog(this, "Precisa ser selecionada a data final","Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // compare dates
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            cal.setTime(sdf.parse(this.datePicker1.getDateStringOrEmptyString()));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao converter a data inicial","Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Calendar cal2 = Calendar.getInstance();
        try {
            cal2.setTime(sdf.parse(this.datePicker2.getDateStringOrEmptyString()));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao converter a data final","Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //
        if (cal.getTimeInMillis() > cal2.getTimeInMillis()){
            JOptionPane.showMessageDialog(this, "Data inicial maior que data final","Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // get visitas
        this.visArr = this.visController.consultaPorPeriodo(cal, cal2);
        
        // get imoveis:
        ArrayList<Imovel> imovArr = new ArrayList<Imovel>();
        try {
            imovArr = this.imovelController.getListaImoveis();
        } catch (Exception ex) {
            Logger.getLogger(Relatorio3.class.getName()).log(Level.SEVERE, null, ex);
        }
        //
        int numImoveis = 0;
        numImoveis = imovArr.size();
        //
        
        String[] dados = new String[this.visArr.size()];
        int i = 0;
        for(Imovel im: imovArr){
            for (Visita ati: im.getListaVisitas()){
                dados[i] = this.formatRes(ati, im.getCodigo() );
                i++;
            }
        }
        
        //
        this.jList1.setListData(dados);
    }//GEN-LAST:event_jButton1ActionPerformed

    public String formatRes(Visita v, int imvCod){
        String res = "";
        String dataVis = "";
        Date date = Calendar.getInstance().getTime();  
        DateFormat dateFormat = new SimpleDateFormat("dd/MMM/yyyy hh:mm");  
        dataVis = dateFormat.format(date);
        res = "Imóvel COD: " + imvCod + ", " + v.getCorretor().getNome() + " - " + v.getComprador().getNome() + " - " + dataVis;
        return res;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private com.github.lgooddatepicker.components.DatePicker datePicker2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
