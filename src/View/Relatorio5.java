/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import Model.Imovel;
import Controller.CtrlImovel;
import Controller.CtrlProposta;
import Model.Proposta;
import Model.Util;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author john
 */
public class Relatorio5 extends javax.swing.JFrame {
    
    private CtrlImovel imovelController;
    private CtrlProposta propostaController;
    

    /**
     * Creates new form Relatorio5
     */
    public Relatorio5() {
        initComponents();
        
        try {
            imovelController = new CtrlImovel();
        } catch (Exception e){
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        datePicker2 = new com.github.lgooddatepicker.components.DatePicker();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Vendas por período");

        jButton1.setText("Pesquisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jLabel2.setText("Data inicial");

        jLabel3.setText("Data final");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(146, 146, 146))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(266, 266, 266)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
            .addGroup(layout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // check if dates are filled
        if (this.datePicker1.getDateStringOrEmptyString().matches("")){
            JOptionPane.showMessageDialog(this, "Precisa ser selecionada a data inicial","Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (this.datePicker2.getDateStringOrEmptyString().matches("")){
            JOptionPane.showMessageDialog(this, "Precisa ser selecionada a data final","Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // compare dates
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            cal.setTime(sdf.parse(this.datePicker1.getDateStringOrEmptyString()));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao converter a data inicial","Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Calendar cal2 = Calendar.getInstance();
        try {
            cal2.setTime(sdf.parse(this.datePicker2.getDateStringOrEmptyString()));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao converter a data final","Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //
        if (cal.getTimeInMillis() > cal2.getTimeInMillis()){
            JOptionPane.showMessageDialog(this, "Data inicial maior que data final","Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // para cada imovel
        // verificar se imovel.estado == Util.VENDIDO
        // se sim, varrer as propostas
        // se proposta.estado == Util.ACEITA eh a proposta da venda.
        // pegar valor da venda e valor da comissao. calcular quanto a imobiliaria ganhou
        
        //
        ArrayList<Imovel> imovArr = new ArrayList<Imovel>();
        try {
            imovArr = this.imovelController.getListaImoveis();
        } catch (Exception ex) {
            Logger.getLogger(Relatorio5.class.getName()).log(Level.SEVERE, null, ex);
        }
        //
        ArrayList<String> res1 = new ArrayList<String>();
        //
        double valorComissao = 0;
        
        for (Imovel pIm: imovArr){
            if (pIm.getEstado().matches(Util.VENDIDO)){
                for (Proposta prop: pIm.getListaPropostas()){
                    if (prop.getEstado().matches(Util.ACEITA)){
                        //
                        valorComissao = ( pIm.getPreco() * (prop.getValor() / 100) );
                        res1.add(this.formarStr(pIm.getCodigo(), pIm.getPreco(), prop.getValor(), valorComissao));
                    }
                }
            }
        }
        //
        String[] dados = new String[res1.size()];
        int i = 0;
        for (i = 0; i < res1.size(); i++){
            dados[i] = res1.get(i);
        }
        //
        //
        this.jList1.setListData(dados);
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public String formarStr(int pImovelCod, double pValImv, double pValVenda, double pComissao){
        String res = "";
        String valImovel = this.convertDoubleTostring(pValImv);
        String valVenda =  this.convertDoubleTostring(pValVenda);
        String valComissao =  this.convertDoubleTostring(pComissao);
        res = "Imóvel COD: " + pImovelCod 
                + ", Valor imóvel: " + valImovel 
                + ", Valor venda: " + valVenda 
                + ", Valor comissão: " + valComissao;
        return res;
    }
    
    public String convertDoubleTostring(double pValor){
        String res = "";
        try {
            res = Double.toString(pValor);
        } catch (NumberFormatException e){
            System.out.println("relatorio5: Nao foi possivel converter para double.");
        }
        return res;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private com.github.lgooddatepicker.components.DatePicker datePicker2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
